/**
 *
 *特性：
    1、每个节点要么是黑色，要么是红色
    2、根节点必须是黑色
    3、叶子节点必须是黑色（为空的叶子节点）
    4、红节点的子节点一定是黑的（红节点不能连续）
    5、任意节点到其任意叶子节点的路径中，黑节点的数量相等
       (确保没有一条路径会比其他路径长出俩倍。因而，红黑树是相对是接近平衡的二叉树。)

操作：
    1、左旋：就是让自己成为自己右子树的左子树，而右子树的左子树成为自己的右子树，右子树成为自己的父节点
        *以下面这个树为例来讲解左旋x的步骤：[x:a,[y:b,c]]，LEFT-ROTATE(T, x) 
        1、right[x] ← left[y]   // 将 “y的左孩子” 设为 “x的右孩子”，即 将b设为x的右孩子
        2、p[left[y]] ← x       // 将 “x” 设为 “y的左孩子的父亲”，即 将b的父亲设为x
        3、p[y] ← p[x]          // 将 “x的父亲” 设为 “y的父亲”
        4、if p[x] is nil[T]
            then root[T] ← y    // 情况1：如果 “x的父亲” 是空节点，即x为跟节点，则将y设为根节点
           else if x is left[p[x]]
            then left[p[x]] ← y // 情况2：如果 x是它父节点的左孩子，则将y设为“x的父节点的左孩子”
           else 
            then right[p[x]] ← y    // 情况3：(x是它父节点的右孩子) 将y设为“x的父节点的右孩子”
        5、left[y] ← x          // 将 “x” 设为 “y的左孩子”
        6、p[x] ← y             // 将 “x的父节点” 设为 “y”
        * 上面是书名的描述，用更加简单的描述就是分3不走
        * 第一步：重新关联右子树的左子树left[right[x]]和当前节点的关系
        * 第二步：重新关联好right[x]和当前节点的父节点p[x]的关系
        * 第三步：重新关联好right[x]和当前节点x的关系
    2、右旋：就是让自己成为自己左子树的右子树，而左子树的右子树成为自己的左子树，左子树成为自己的父节点
        * 同理参考左旋
 * @author 王鹏
 * @date 2019年4月1日
 */
package com.myccnice.practice.manual.datastructure.brtree;