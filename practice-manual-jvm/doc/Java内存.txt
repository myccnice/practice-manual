1、Java内存模型
2、Java虚拟机的内存结构
3、volatile、final和synchronized(帮助程序员把代码中的并发需求描述给编译器)
    3.1、synchronized：
        ①互斥性：对于同一个monitor对象，只能够被一个线程持有，意味着一旦有线程进入了同步代码块，那么其它线程就不能进入直到第一个进入的线程退出代码块
        ②可见性：同步块之前或者期间写入动作，对于后续进入该代码块的线程是可见的。在一个线程退出同步块时，线程释放monitor对象，它的作用是把CPU缓存数据（本地缓存数据）刷新到主内存中，从而实现该线程的行为可以被其它线程看到
                  在其它线程进入到该代码块时，需要获得monitor对象，它在作用是使CPU缓存失效，从而使变量从主内存中重新加载，然后就可以看到之前线程对该变量的修改。
        ③禁止指令的重排序
    3.2、final：
        ①可见性：final字段被设置后对于其它线程是可见的。
    3.3、volatile
        ①可见性：保证在被写入之后，会被刷新到主内存中，这样就可以立即对其它线程可以见。类似的，在读取volatile字段之前，缓存必须是无效的，以保证每次拿到的都是主内存的值，都是最新的值。volatile的内存语义和sychronize获取和释放monitor的实现目的是差不多的。
